This folder is full of the GDML files for.cooker, the human-readable-formatted source data, and the python code needed to produce new GDML files to your specifications.

~/gdml_files/            --- Contains GDML files.  Files produced by the python code appear here.
~/gdml_files/schema/     --- Contains XML schema, some modified for.cooker, needed for parsing the GDML files.
~/human_readable/        --- Contains .txt files that define the solids, materials, volumes, positions, and rotations of the.cooker detectors.
~/python_gdml_generator/ --- Contains the python code for automatically generating new GDML files.

<><><><><><><><><><><><><><><><><><><><><><><><>

DESCRIPTION OF DEFAULT GDML FILES

GDML files with Geant4 in their name are designed to be parsed by the native GEANT4 GDML parser; those with Root in their name are designed to be parsed by the native ROOT GDML parser.  The only difference between these two is that the ROOT parser doesn't know how to make an elliptical cone, so the collimator on the target is omitted from these.  A file with Fitting in its name is modified in subtle ways to make it more useful for running reconstruction analysis.

The default files have a name ending in _nominal.gdml if they represent nominal geometries, or a name ending in _survey1.gdml if they reflect all survey data that has been made available so far.  See the corresponding human-readable text files defining positions and rotations; there is some guidance below on how to interpret these files.

If, additionally, _WC_cells is added to a GDML file's name, it means that this file uses a slightly altered volume hierarchy to describe the wire chambers.  This is only useful in niche cases, so don't use these files unless you know what you're doing.

<><><><><><><><><><><><><><><><><><><><><><><><>

HOW TO GENERATE YOUR OWN GDML

The basic files needed for.cooker can be re-generated by running the short script

~$ . ~/bashscript

If you wish to make alterations or have special requirements, you can use

~$ cd python_gdml_generator
~/python_gdml_generator$ python generateGDML.py <options>

The options are explained in a large comment block at the top of the generateGDML.py file.  Any GDML you generate in this way will appear as a set of files (based on FittingGeant4.gdml, Root.gdml, and Geant4.gdml) in the ~/gdml_files/ directory.  Note that the python code is a version of Python 2 and may not run properly if you have Python 3 installed natively instead.

The normal way to go about making your own GDML is:

1. Identify your need.  Do you want to move an element?  Do you want to add or remove an element?  Etc.

2. Modify the appropriate human-readable text file.  These are broken up by category, and they contain all the information the GDML needs, but in a more simple structure.  GDML builds volumes the same way Geant4 does, so you'll have to think in that mode.  Volumes are placed inside mother volumes with relative positions and rotations, and solids are defined according to pre-existing Geant4 solid classes.

3. Use the python script with an option that tells it to read in your text file(s) --- which may be heavily based on the defaults with only slight changes, or which may be totally original.

4. Make-install your git repository, because the Monte Carlo will look for your new GDML file in the install directory.

5. Run the Monte Carlo, giving the name of your new GDML file, probably something like Geant4_XXXXX.gdml, on the command line.

<><><><><><><><><><><><><><><><><><><><><><><><>

HOW TO READ .TXT SOURCE FILES

If you are unfamiliar with Geant4, you may find it difficult to read even these "human-readable" files.  As long as you have some background with building volumes in Geant4, though, they should hopefully be clear and appear simply organized.

The materials, solids, and volumes files are meant to be straightforward in their presentation.  They contain all the information that is needed by a simulation, labeled in a natural way.  In each case, note that objects may be made up of other objects; e.g., "materials" may be made up of "elements" and "logical volumes" may have daughter "physical volumes".  All components must be declared first and then referenced later on in the file.  So the order of each of these files is top-to-bottom.  Each file declares the basic elements first, then more complicated or compound objects later on.  All volumes are declared in the order we would like GEANT4 or ROOT to read them.

There may be multiple position and rotation files.  These represent different geometries.  We expect there to be differences between the nominal geometry of our detectors and the actual surveyed positions, and further differences if another survey is taken months later.  Positions (x,y,z) are all reported for a given object in its immediate mother's local coordinate system!  This means that only top-level volumes have positions reported in the.cooker global coordinates, since these volumes have the World as their immediate mother.  Rotations (x,y,z) are reported in the same way.  The x-rotation is applied first, then y, then z, and all three are rotations about intrinsic axes, not fixed extrinsic axes!

<><><><><><><><><><><><><><><><><><><><><><><><>

HOW TO USE GDML

When you make install, the GDML files specified in ~/CMakeLists.txt are installed under $HOME/.cooker/shared/gdml/ so that various plugins and programs can utilize them.  Your code should probably look for the files in that location, and you should add lines to ~/CMakeLists.txt if needed so that any new GDML files you generate and wish to use are installed in this fixed location.

GDML is designed to interface with ROOT and with GEANT4.  See the.cooker Monte Carlo file.cooker.cc for an example of how to parse GDML files for use with GEANT4.  See the visualization plugin EventDisplay (Det_EventDisplay.cpp) for an example of how to use GDML with ROOT.  If you have further questions, ask around the.cooker collaboration, or check the official GDML Documentation and User's Guide at:

http://gdml.web.cern.ch/GDML/
http://gdml.web.cern.ch/GDML/doc/GDMLmanual.pdf

<><><><><><><><><><><><><><><><><><><><><><><><>